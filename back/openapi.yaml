openapi: "3.1.0"
info:
  version: alpha1.0.0
  title: Product Management Demo
  license:
    name: Internet Software Consortium Permissive Free Software License
    identifier: ISC
servers:
  - url: http://localhost:8080
paths:
  /products:
    get:
      summary: List all products
      operationId: productsListAll
      tags:
        - products
      # parameters:
      #   - name: limit
      #     in: query
      #     description: How many products to return at one time (max 100)
      #     required: false
      #     schema:
      #       type: integer
      #       maximum: 100
      #       format: int32
      #   - name: categoryid
      #     in: query
      #     description: Category of products to return
      #     required: false
      #     schema:
      #       type: integer
      #       format: int32
      #   - name: sortby
      #     in: query
      #     description: Field used for sort products
      #     required: false
      #     example: "price"
      #     schema:
      #       type: string
      #   - name: sortdirection
      #     in: query
      #     description: Direction used for sort products ("asc" or "desc")
      #     required: false
      #     example: "desc"
      #     schema:
      #       type: string
      responses:
        '200':
          description: An array of products # A paged array of products
          # headers:
          #   x-next:
          #     description: A link to the next page of responses
          #     schema:
          #       type: string
          #   x-prev:
          #     description: A link to the next page of responses
          #     schema:
          #       type: string
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ProductList"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a product
      operationId: productsCreate
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductToCreate'
        required: true
      responses:
        '201':
          description: Product details
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ProductDetails"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{productId}:
    get:
      summary: Detailed information of a product
      operationId: productsGetOneById
      tags:
        - products
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Product details
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ProductDetails"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update information of a product
      operationId: productsUpdateById
      tags:
        - products
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to update
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetailsToUpdate'
        required: true
      responses:
        '200':
          description: Product details
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ProductDetails"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a product
      operationId: productsDeleteById
      tags:
        - products
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to delete
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Empty response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    ProductToCreate:
      type: object
      required:
        - code
        - name
        - category
      properties:
        category:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
    ProductDetails:      
      allOf:
        - $ref: '#/components/schemas/ProductToCreate'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64
    ProductDetailsToUpdate:
      type: object
      properties:
        category:
          type: integer
          format: int64
        code:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
    ProductList:
      type: array
      #maxItems: 100
      items:
        $ref: "#/components/schemas/ProductDetails"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string